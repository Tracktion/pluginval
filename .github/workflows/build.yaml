name: Build
on:
  push:
  workflow_dispatch:

env:
  BINARY_NAME: pluginval
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            binary: ./pluginval
          - name: macOS
            os: macos-12
            binary: pluginval.app/Contents/MacOS/pluginval
          - name: Windows
            os: windows-latest
            binary: ./pluginval.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Environment Variables
        shell: bash
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "APP_DIR=${{ env.BUILD_DIR }}/${{ env.BINARY_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
          echo "ZIP_FILE_NAME=${{ env.BINARY_NAME }}-${{ matrix.name }}.zip" >> $GITHUB_ENV
      
      - name: Install dependencies (Linux)
        if: ${{ matrix.name == 'Linux' }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y freeglut3-dev g++ libasound2-dev libcurl4-openssl-dev libfreetype6-dev libjack-jackd2-dev libx11-dev libxcomposite-dev libxcursor-dev libxinerama-dev libxrandr-dev mesa-common-dev ladspa-sdk webkit2gtk-4.0 libgtk-3-dev xvfb ccache

      # Import certificates
      - uses: apple-actions/import-codesign-certs@v1
        if: ${{ matrix.name == 'macOS' }}
        with:
          p12-file-base64: ${{ secrets.DEV_CERT_APP }}
          p12-password: ${{ secrets.CERT_PASSWORD }}
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          DEV_CERT_APP: ${{ secrets.DEV_CERT_APP }}

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.name }}-${{ env.BUILD_TYPE }}

      - name: Configure
        shell: bash
        run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache .

      - name: Build
        shell: bash
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

      - name: Run Pluginval Tests
        working-directory: ${{ env.APP_DIR }}
        shell: bash
        run: |
          pwd
          ls -ahl
          ${{ matrix.binary }} --run-tests
          
      - name: Codesign (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.APP_DIR }}/pluginval.app --deep --strict --options=runtime --timestamp
        
      - name: "Notarize (macOS)"
        if: ${{ matrix.name == 'macOS' }}
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: ${{ env.APP_DIR }}/pluginval.app
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          
      - name: "Staple (macOS)"
        if: ${{ matrix.name == 'macOS' }}
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: ${{ env.APP_DIR }}/pluginval.app
      
      - name: Create zip files
        working-directory: ${{ env.APP_DIR }}
        run: cmake -E tar cfv ${{ env.ZIP_FILE_NAME }} --format=zip ${{ matrix.binary }}
      
      - name: Upload zip files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_FILE_NAME }}
          path: ${{ env.APP_DIR }}/${{ env.ZIP_FILE_NAME }}
      
  # Create release for tagged refs
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      
      - uses: actions/checkout@v3
                
      - name: Get Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Display structure of downloaded files
        run: ls -la
    
      - name: Set tag name variable
        shell: bash        
        run: |
          REF=${GITHUB_REF}
          echo "TAG_NAME=${REF##*/}" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          body_path: CHANGELIST.md
          draft: true
          files: |
            CHANGELIST.md/*
            pluginval-Linux.zip/*
            pluginval-macOS.zip/*
            pluginval-Windows.zip/*